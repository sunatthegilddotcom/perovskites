# -*- coding: utf-8 -*-
"""Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WOuKwfM0zLo_0oI2K0kGLZnFKQ88kbS5
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import random


def assign_IDs(dataset, ID_list):
    data = dataset.sample(frac=1.0)[0]
    ID_dict = {}
    for ii in range(len(ID_list)):
        if ID_list[ii][1] in ID_dict.keys():
            ID_dict[ID_list[ii][1]].append(data[ii])
        else:
            ID_dict[ID_list[ii][1]] = [data[ii]]
    return ID_dict


def visualize_clusters(ID_dict, img_per_group=10, color_map='gray'):
    """
    Takes a dictionary of (cluster group: images) as input and displays
    random PL images from each cluster group

    Parameters
    -------------------
    ID_dict: dict
        Dictionary from assign_IDs function
    img_per_group: int
        How many images per group user wants to display
    color_map: str
        User can decide cmap of displayed images

    Output:
    -------------------
    Random PL images from each cluster group

    """
    fig, axes = plt.subplots(len(ID_dict), img_per_group, figsize=(20, 20))

    # Iterating over cluster groups
    for i in range(len(ID_dict)):
        size = len(ID_dict[i])

    # Need to deal with if the cluster group has less than img_per_group images
        if size < img_per_group:
            # Create indexed array
            r = np.arange(size)
            # Create so that when we plot the images
            # nested for loop does not go outside of range
            z = size

        else:
            # Pick img_per_group random image numbers, then sort
            r = random.sample(range(size), img_per_group)
            r.sort()
            z = img_per_group

        for j in range(z):
            # Reshaping (32, 32, 1) into (32, 32) for easier plotting
            img = ID_dict[i][r[j]].reshape(32, 32)
            # User can select preferred cmap when calling the function
            axes[i][j].imshow(img, cmap=color_map)

        for k in range(z):
            axes[i][k].plot([1.2, 0.0], [1.05, 1.05],
                            transform=axes[i][k].transAxes,
                            clip_on=False, linewidth=4,
                            color='black')
            axes[i][k].get_xaxis().set_visible(False)
            axes[i][k].set_yticks([])

    rows = ['Group {}'.format(row) for row in range(len(ID_dict))]
    for ax, row in zip(axes[:, 0], rows):
        ax.set_ylabel(row, rotation=90, size='large')
    fig.tight_layout()
    sns.despine(left=True, bottom=True, right=True)
